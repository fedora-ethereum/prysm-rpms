From: Aaron Beitch <aaronb@arista.com>
Date: Wed, 17 Feb 2021 13:07:41 -0800
Subject: [PATCH] kafka: Drop support for openconfig.proto

It causes issues when upgrading to google.golang.org/protobuf/proto.

Change-Id: I8dc0894cc9c63950470d9a7ad24ad9d66dc468e0

diff --git a/kafka/openconfig/encoder.go b/kafka/openconfig/encoder.go
deleted file mode 100644
index 9d303a1..0000000
--- a/kafka/openconfig/encoder.go
+++ /dev/null
@@ -1,90 +0,0 @@
-// Copyright (c) 2016 Arista Networks, Inc.
-// Use of this source code is governed by the Apache License 2.0
-// that can be found in the COPYING file.
-
-package openconfig
-
-import (
-	"encoding/json"
-	"fmt"
-	"time"
-
-	"github.com/aristanetworks/goarista/elasticsearch"
-	"github.com/aristanetworks/goarista/kafka"
-	"github.com/aristanetworks/goarista/openconfig"
-
-	"github.com/Shopify/sarama"
-	"github.com/aristanetworks/glog"
-	"github.com/golang/protobuf/proto"
-	pb "github.com/openconfig/reference/rpc/openconfig"
-)
-
-// UnhandledMessageError is used for proto messages not matching the handled types
-type UnhandledMessageError struct {
-	message proto.Message
-}
-
-func (e UnhandledMessageError) Error() string {
-	return fmt.Sprintf("Unexpected type %T in proto message: %#v", e.message, e.message)
-}
-
-// UnhandledSubscribeResponseError is used for subscribe responses not matching the handled types
-type UnhandledSubscribeResponseError struct {
-	response *pb.SubscribeResponse
-}
-
-func (e UnhandledSubscribeResponseError) Error() string {
-	return fmt.Sprintf("Unexpected type %T in subscribe response: %#v", e.response, e.response)
-}
-
-type elasticsearchMessageEncoder struct {
-	*kafka.BaseEncoder
-	topic   string
-	dataset string
-	key     sarama.Encoder
-}
-
-// NewEncoder creates and returns a new elasticsearch MessageEncoder
-func NewEncoder(topic string, key sarama.Encoder, dataset string) kafka.MessageEncoder {
-	baseEncoder := kafka.NewBaseEncoder("elasticsearch")
-	return &elasticsearchMessageEncoder{
-		BaseEncoder: baseEncoder,
-		topic:       topic,
-		dataset:     dataset,
-		key:         key,
-	}
-}
-
-func (e *elasticsearchMessageEncoder) Encode(message proto.Message) ([]*sarama.ProducerMessage,
-	error) {
-
-	response, ok := message.(*pb.SubscribeResponse)
-	if !ok {
-		return nil, UnhandledMessageError{message: message}
-	}
-	update := response.GetUpdate()
-	if update == nil {
-		return nil, UnhandledSubscribeResponseError{response: response}
-	}
-	updateMap, err := openconfig.NotificationToMap(e.dataset, update,
-		elasticsearch.EscapeFieldName)
-	if err != nil {
-		return nil, err
-	}
-	// Convert time to ms to make elasticsearch happy
-	updateMap["timestamp"] = updateMap["timestamp"].(int64) / 1000000
-	updateJSON, err := json.Marshal(updateMap)
-	if err != nil {
-		return nil, err
-	}
-	glog.V(9).Infof("kafka: %s", updateJSON)
-	return []*sarama.ProducerMessage{
-		{
-			Topic:    e.topic,
-			Key:      e.key,
-			Value:    sarama.ByteEncoder(updateJSON),
-			Metadata: kafka.Metadata{StartTime: time.Unix(0, update.Timestamp), NumMessages: 1},
-		},
-	}, nil
-
-}
diff --git a/kafka/openconfig/encoder_test.go b/kafka/openconfig/encoder_test.go
deleted file mode 100644
index 1838cd0..0000000
--- a/kafka/openconfig/encoder_test.go
+++ /dev/null
@@ -1,62 +0,0 @@
-// Copyright (c) 2016 Arista Networks, Inc.
-// Use of this source code is governed by the Apache License 2.0
-// that can be found in the COPYING file.
-
-package openconfig
-
-import (
-	"encoding/json"
-	"testing"
-
-	"github.com/aristanetworks/goarista/openconfig"
-	"github.com/aristanetworks/goarista/test"
-
-	pb "github.com/openconfig/reference/rpc/openconfig"
-)
-
-func TestJsonify(t *testing.T) {
-	var tests = []struct {
-		notification *pb.Notification
-		document     map[string]interface{}
-	}{{
-		notification: &pb.Notification{
-			Prefix: &pb.Path{Element: []string{"Sysdb", "a"}},
-			Update: []*pb.Update{
-				{
-					Path: &pb.Path{Element: []string{"b"}},
-					Value: &pb.Value{
-						Value: []byte{52, 50},
-						Type:  pb.Type_JSON,
-					},
-				},
-			},
-		},
-		document: map[string]interface{}{
-			"timestamp": int64(0),
-			"dataset":   "foo",
-			"update": map[string]interface{}{
-				"Sysdb": map[string]interface{}{
-					"a": map[string]interface{}{
-						"b": 42,
-					},
-				},
-			},
-		},
-	},
-	}
-	for _, jsonTest := range tests {
-		expected, err := json.Marshal(jsonTest.document)
-		if err != nil {
-			t.Fatal(err)
-		}
-		actual, err := openconfig.NotificationToJSONDocument("foo",
-			jsonTest.notification, nil)
-		if err != nil {
-			t.Error(err)
-		}
-		diff := test.Diff(actual, expected)
-		if len(diff) > 0 {
-			t.Errorf("Unexpected diff: %s", diff)
-		}
-	}
-}
